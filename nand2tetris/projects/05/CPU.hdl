// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // C instruction or A instruction
    // M is destination?
    // Write to M?
    And(a=instruction[15], b=instruction[3], out=writeM)

    // Write outM or instruction to A?
    Mux16(a=instruction, b=outM, sel=instruction[15], out=inA)

    // A instruction or C instruction and register A is destination
    Not(in=instruction[15], out=nota)
    Or(a=nota, b=instruction[5], out=CtlAload)

    // Register A
    Register(in=inA, out=addressM, load=CtlAload)

    // C instruction and register D is destination
    And(a=instruction[15], b=instruction[4], out=CtlDload)

    // Register D
    Register(in=outALU, out=inALUx, load=CtlDload)

    // ALU y input A or M?
    Mux16(a=addressM, b=inM, sel=instruction[12], out=inALUy)

    ALU(x=inALUx, y=inALUy, zx=instruction[6], nx=instruction[7], zy=instruction[8],
        ny=instruction[9], f=instruction[10], no=instruction[11], out=outM, zr=outzr, ng=outng)

    // outM < 0
    And(a=instruction[2], b=outng, out=jumpFlagA)

    // outM = 0
    And(a=instruction[1], b=outzr, out=jumpFlagB)

    // outM > 0
    Or(a=outng b=outzr, out=outbz)
    Not(in=outbz, out=bz)
    And(a=instruction[o], b=bz, out=jumpFlagC)

    // Jump?
    Or(a=jumpFlagA b=jumpFlagA, out=tmp)
    Or(a=tmp b=jumpFlagC, out=jumpFlag)

    // Increment?
    Not(in=jumpFlag, out=incFlag)

    PC(in=addressM, load=jumpFlag, inc=incFlag, reset=reset, out=pc)

}
